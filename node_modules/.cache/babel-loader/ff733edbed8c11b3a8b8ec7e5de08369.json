{"ast":null,"code":"import _objectSpread from \"/home/dev/Bureau/testZonova/node_modules/@babel/runtime/helpers/esm/objectSpread\";\nvar initialState = {\n  bookList: \"\",\n  genre: \"\"\n};\n\nfunction product() {\n  var state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : initialState;\n  var action = arguments.length > 1 ? arguments[1] : undefined;\n\n  switch (action.type) {\n    case 'GET_LIST':\n      var gen = [action.value[0].genre];\n      var test = false;\n\n      for (var i = 0; i < action.value.length; i++) {\n        for (var j = 0; j < gen.length; j++) {\n          if (action.value[i].genre == gen[j]) {}\n        }\n      }\n\n      state = _objectSpread({}, state, {\n        bookList: action.value\n      });\n      console.log(\"connecter\", state.bookList);\n      return state;\n\n    default:\n      return state;\n  }\n}\n\nexport default product;","map":{"version":3,"sources":["/home/dev/Bureau/testZonova/src/Store/Reducer/reducer.js"],"names":["initialState","bookList","genre","product","state","action","type","gen","value","test","i","length","j","console","log"],"mappings":";AAAA,IAAMA,YAAY,GAAG;AACnBC,EAAAA,QAAQ,EAAE,EADS;AAEnBC,EAAAA,KAAK,EAAE;AAFY,CAArB;;AAMA,SAASC,OAAT,GAA+C;AAAA,MAA9BC,KAA8B,uEAAtBJ,YAAsB;AAAA,MAARK,MAAQ;;AAG7C,UAAQA,MAAM,CAACC,IAAf;AACE,SAAK,UAAL;AACE,UAAIC,GAAG,GAAG,CAACF,MAAM,CAACG,KAAP,CAAa,CAAb,EAAgBN,KAAjB,CAAV;AACA,UAAIO,IAAI,GAAG,KAAX;;AACA,WAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGL,MAAM,CAACG,KAAP,CAAaG,MAAjC,EAAyCD,CAAC,EAA1C,EAA8C;AAC5C,aAAK,IAAIE,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGL,GAAG,CAACI,MAAxB,EAAgCC,CAAC,EAAjC,EAAqC;AACpC,cAAGP,MAAM,CAACG,KAAP,CAAaE,CAAb,EAAgBR,KAAhB,IAAuBK,GAAG,CAACK,CAAD,CAA7B,EAAiC,CAEhC;AACD;AAGF;;AAEDR,MAAAA,KAAK,qBAAQA,KAAR;AAAeH,QAAAA,QAAQ,EAAEI,MAAM,CAACG;AAAhC,QAAL;AACAK,MAAAA,OAAO,CAACC,GAAR,CAAY,WAAZ,EAAyBV,KAAK,CAACH,QAA/B;AACA,aAAOG,KAAP;;AAIF;AACE,aAAOA,KAAP;AArBJ;AAuBD;;AAED,eAAeD,OAAf","sourcesContent":["const initialState = {\n  bookList: \"\",\n  genre: \"\"\n\n}\n\nfunction product(state = initialState, action) {\n\n\n  switch (action.type) {\n    case 'GET_LIST':\n      var gen = [action.value[0].genre]\n      var test = false\n      for (let i = 0; i < action.value.length; i++) {\n        for (let j = 0; j < gen.length; j++) {\n         if(action.value[i].genre==gen[j]){\n           \n         }\n        }\n        \n\n      }\n\n      state = { ...state, bookList: action.value }\n      console.log(\"connecter\", state.bookList);\n      return state\n\n\n\n    default:\n      return state\n  }\n}\n\nexport default product"]},"metadata":{},"sourceType":"module"}